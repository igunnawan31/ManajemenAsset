// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using qrmanagement.backend.Context;

#nullable disable

namespace qrmanagement.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250402135734_modifyAssetMove")]
    partial class modifyAssetMove
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("qrmanagement.backend.Models.Asset", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("assetType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("locationId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            id = "AN-001-070225",
                            assetType = "Electronics",
                            imagePath = "",
                            itemStatus = "Active",
                            locationId = 2,
                            name = "Samsung_Galaxy"
                        },
                        new
                        {
                            id = "AN-002-070225",
                            assetType = "Electronics",
                            imagePath = "",
                            itemStatus = "Active",
                            locationId = 1,
                            name = "Samsung_Flip"
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.AssetMove", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("assetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("moveStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("id");

                    b.HasIndex("assetNumber");

                    b.HasIndex("ticketNumber");

                    b.ToTable("AssetMoves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-001-070225"
                        },
                        new
                        {
                            id = 2,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-002-070225"
                        },
                        new
                        {
                            id = 3,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-001-070225"
                        },
                        new
                        {
                            id = 4,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-001-070225"
                        },
                        new
                        {
                            id = 5,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-002-070225"
                        },
                        new
                        {
                            id = 6,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-002-070225"
                        },
                        new
                        {
                            id = 7,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Moving",
                            ticketNumber = "TN-003-070225"
                        },
                        new
                        {
                            id = 8,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Pending",
                            ticketNumber = "TN-004-070225"
                        },
                        new
                        {
                            id = 9,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Arrived",
                            ticketNumber = "TN-005-070225"
                        },
                        new
                        {
                            id = 10,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Missing",
                            ticketNumber = "TN-005-070225"
                        },
                        new
                        {
                            id = 11,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Draft",
                            ticketNumber = "TN-006-070225"
                        },
                        new
                        {
                            id = 12,
                            assetNumber = "AN-002-070225",
                            moveStatus = "Draft",
                            ticketNumber = "TN-007-070225"
                        },
                        new
                        {
                            id = 13,
                            assetNumber = "AN-001-070225",
                            moveStatus = "Moving",
                            ticketNumber = "TN-008-070225"
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Branch", b =>
                {
                    b.Property<int>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("branchId"));

                    b.Property<string>("branchEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("kecamatanId")
                        .HasColumnType("int");

                    b.Property<int>("kotaId")
                        .HasColumnType("int");

                    b.Property<int?>("parentId")
                        .HasColumnType("int");

                    b.HasKey("branchId");

                    b.HasIndex("kecamatanId");

                    b.HasIndex("kotaId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            branchId = 1,
                            branchEmail = "astraInternational@ai.astra.co.id",
                            branchLocation = "Jakarta Utara",
                            branchName = "Astra International",
                            branchPhone = "1234567890123",
                            kecamatanId = 1,
                            kotaId = 1
                        },
                        new
                        {
                            branchId = 2,
                            branchEmail = "ag.it@ai.astra.co.id",
                            branchLocation = "Jakarta Pusat",
                            branchName = "Astragraphia Information Technology",
                            branchPhone = "1234567890321",
                            kecamatanId = 2,
                            kotaId = 2,
                            parentId = 1
                        },
                        new
                        {
                            branchId = 3,
                            branchEmail = "jakarta@company.com",
                            branchLocation = "Jl. Sudirman No. 1, Jakarta",
                            branchName = "Branch Jakarta",
                            branchPhone = "+62123456789",
                            kecamatanId = 201,
                            kotaId = 101,
                            parentId = 1
                        },
                        new
                        {
                            branchId = 4,
                            branchEmail = "bandung@company.com",
                            branchLocation = "Jl. Asia Afrika No. 2, Bandung",
                            branchName = "Branch Bandung",
                            branchPhone = "+62223456789",
                            kecamatanId = 202,
                            kotaId = 102,
                            parentId = 1
                        },
                        new
                        {
                            branchId = 5,
                            branchEmail = "surabaya@company.com",
                            branchLocation = "Jl. Tunjungan No. 3, Surabaya",
                            branchName = "Branch Surabaya",
                            branchPhone = "+62313456789",
                            kecamatanId = 203,
                            kotaId = 103
                        },
                        new
                        {
                            branchId = 6,
                            branchEmail = "yogyakarta@company.com",
                            branchLocation = "Jl. Malioboro No. 4, Yogyakarta",
                            branchName = "Branch Yogyakarta",
                            branchPhone = "+62274567890",
                            kecamatanId = 204,
                            kotaId = 104,
                            parentId = 5
                        },
                        new
                        {
                            branchId = 7,
                            branchEmail = "medan@company.com",
                            branchLocation = "Jl. Gatot Subroto No. 5, Medan",
                            branchName = "Branch Medan",
                            branchPhone = "+62613456789",
                            kecamatanId = 205,
                            kotaId = 105
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Kecamatan", b =>
                {
                    b.Property<int>("kecamatanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kecamatanId"));

                    b.Property<string>("kecamatanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("kotaId")
                        .HasColumnType("int");

                    b.HasKey("kecamatanId");

                    b.HasIndex("kotaId");

                    b.ToTable("Kecamatans");

                    b.HasData(
                        new
                        {
                            kecamatanId = 1,
                            kecamatanName = "Tanjung Priok",
                            kotaId = 1
                        },
                        new
                        {
                            kecamatanId = 2,
                            kecamatanName = "Senen",
                            kotaId = 2
                        },
                        new
                        {
                            kecamatanId = 201,
                            kecamatanName = "Menteng",
                            kotaId = 101
                        },
                        new
                        {
                            kecamatanId = 202,
                            kecamatanName = "Cibiru",
                            kotaId = 102
                        },
                        new
                        {
                            kecamatanId = 203,
                            kecamatanName = "Wonokromo",
                            kotaId = 103
                        },
                        new
                        {
                            kecamatanId = 204,
                            kecamatanName = "Kotagede",
                            kotaId = 104
                        },
                        new
                        {
                            kecamatanId = 205,
                            kecamatanName = "Medan Baru",
                            kotaId = 105
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Kota", b =>
                {
                    b.Property<int>("kotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kotaId"));

                    b.Property<string>("kotaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("kotaId");

                    b.ToTable("Kotas");

                    b.HasData(
                        new
                        {
                            kotaId = 1,
                            kotaName = "Jakarta Utara"
                        },
                        new
                        {
                            kotaId = 2,
                            kotaName = "Jakarta Pusat"
                        },
                        new
                        {
                            kotaId = 101,
                            kotaName = "Jakarta Selatan"
                        },
                        new
                        {
                            kotaId = 102,
                            kotaName = "Bandung"
                        },
                        new
                        {
                            kotaId = 103,
                            kotaName = "Surabaya"
                        },
                        new
                        {
                            kotaId = 104,
                            kotaName = "Yogyakarta"
                        },
                        new
                        {
                            kotaId = 105,
                            kotaName = "Medan"
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Ticket", b =>
                {
                    b.Property<string>("ticketNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("approvalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("branchDestination")
                        .HasColumnType("int");

                    b.Property<int>("branchOrigin")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("dateApproved")
                        .HasColumnType("date");

                    b.Property<DateOnly>("dateRequested")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("inboundDate")
                        .HasColumnType("date");

                    b.Property<string>("moveStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("outboundDate")
                        .HasColumnType("date");

                    b.Property<int>("receivedBy")
                        .HasColumnType("int");

                    b.Property<string>("rejectClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("requestReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("requestedBy")
                        .HasColumnType("int");

                    b.HasKey("ticketNumber");

                    b.HasIndex("branchDestination");

                    b.HasIndex("branchOrigin");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            ticketNumber = "TN-001-070225",
                            approvalStatus = "Approved",
                            branchDestination = 2,
                            branchOrigin = 1,
                            dateApproved = new DateOnly(2025, 1, 30),
                            dateRequested = new DateOnly(2025, 1, 28),
                            inboundDate = new DateOnly(2025, 2, 5),
                            moveStatus = "Completed",
                            outboundDate = new DateOnly(2025, 2, 1),
                            receivedBy = 1,
                            requestedBy = 2
                        },
                        new
                        {
                            ticketNumber = "TN-002-070225",
                            approvalStatus = "Approved",
                            branchDestination = 1,
                            branchOrigin = 2,
                            dateApproved = new DateOnly(2025, 1, 30),
                            dateRequested = new DateOnly(2025, 1, 28),
                            inboundDate = new DateOnly(2025, 2, 5),
                            moveStatus = "Completed",
                            outboundDate = new DateOnly(2025, 2, 1),
                            receivedBy = 2,
                            requestedBy = 1
                        },
                        new
                        {
                            ticketNumber = "TN-003-070225",
                            approvalStatus = "Approved",
                            branchDestination = 1,
                            branchOrigin = 2,
                            dateApproved = new DateOnly(2025, 2, 26),
                            dateRequested = new DateOnly(2025, 2, 25),
                            inboundDate = new DateOnly(2025, 3, 3),
                            moveStatus = "Completed",
                            outboundDate = new DateOnly(2025, 3, 1),
                            receivedBy = 2,
                            requestedBy = 1
                        },
                        new
                        {
                            ticketNumber = "TN-004-070225",
                            approvalStatus = "Pending",
                            branchDestination = 2,
                            branchOrigin = 1,
                            dateRequested = new DateOnly(2025, 2, 28),
                            moveStatus = "Not_Started",
                            outboundDate = new DateOnly(2025, 3, 5),
                            receivedBy = 1,
                            requestedBy = 2
                        },
                        new
                        {
                            ticketNumber = "TN-005-070225",
                            approvalStatus = "Approved",
                            branchDestination = 3,
                            branchOrigin = 2,
                            dateApproved = new DateOnly(2025, 3, 6),
                            dateRequested = new DateOnly(2025, 3, 5),
                            inboundDate = new DateOnly(2025, 3, 12),
                            moveStatus = "Completed",
                            outboundDate = new DateOnly(2025, 3, 10),
                            receivedBy = 2,
                            requestedBy = 3
                        },
                        new
                        {
                            ticketNumber = "TN-006-070225",
                            approvalStatus = "Draft",
                            branchDestination = 3,
                            branchOrigin = 1,
                            dateRequested = new DateOnly(2025, 3, 8),
                            moveStatus = "Not_Started",
                            receivedBy = 1,
                            requestedBy = 3
                        },
                        new
                        {
                            ticketNumber = "TN-007-070225",
                            approvalStatus = "Rejected",
                            branchDestination = 3,
                            branchOrigin = 1,
                            dateRequested = new DateOnly(2025, 3, 8),
                            moveStatus = "Not_Started",
                            receivedBy = 3,
                            rejectReason = "Unit rusak",
                            requestedBy = 1
                        },
                        new
                        {
                            ticketNumber = "TN-008-070225",
                            approvalStatus = "Approved",
                            branchDestination = 1,
                            branchOrigin = 3,
                            dateApproved = new DateOnly(2025, 3, 11),
                            dateRequested = new DateOnly(2025, 3, 10),
                            moveStatus = "In_Progress",
                            outboundDate = new DateOnly(2025, 3, 15),
                            receivedBy = 1,
                            requestedBy = 3
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userBranch")
                        .HasColumnType("int");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userRole")
                        .HasColumnType("int");

                    b.Property<int>("userSubRole")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.HasIndex("userBranch");

                    b.HasIndex("userEmail")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            userId = 1,
                            password = "12345",
                            userBranch = 1,
                            userEmail = "mgunawan@ai.astra.co.id",
                            userName = "Gunawan",
                            userPhone = "1234567890456",
                            userRole = 1,
                            userSubRole = 0
                        },
                        new
                        {
                            userId = 2,
                            password = "12345",
                            userBranch = 1,
                            userEmail = "gunawan@ai.astra.co.id",
                            userName = "MGunawan",
                            userPhone = "1234567890654",
                            userRole = 1,
                            userSubRole = 1
                        },
                        new
                        {
                            userId = 3,
                            password = "12345",
                            userBranch = 2,
                            userEmail = "aldisar@ai.astra.co.id",
                            userName = "Aldisar",
                            userPhone = "1234567890789",
                            userRole = 0,
                            userSubRole = 0
                        },
                        new
                        {
                            userId = 4,
                            password = "12345",
                            userBranch = 2,
                            userEmail = "gibran@ai.astra.co.id",
                            userName = "Gibran",
                            userPhone = "1234567890987",
                            userRole = 0,
                            userSubRole = 1
                        });
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Asset", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Branch", "branch")
                        .WithMany("assets")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.AssetMove", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Asset", "asset")
                        .WithMany("assetMoves")
                        .HasForeignKey("assetNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("qrmanagement.backend.Models.Ticket", "ticket")
                        .WithMany("assetMoves")
                        .HasForeignKey("ticketNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("asset");

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Branch", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Kecamatan", "branchKecamatan")
                        .WithMany("Branches")
                        .HasForeignKey("kecamatanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("qrmanagement.backend.Models.Kota", "branchKota")
                        .WithMany("Branches")
                        .HasForeignKey("kotaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("branchKecamatan");

                    b.Navigation("branchKota");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Kecamatan", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Kota", "kecamatanKota")
                        .WithMany("kecamatans")
                        .HasForeignKey("kotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kecamatanKota");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Ticket", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Branch", "destination")
                        .WithMany("inbounds")
                        .HasForeignKey("branchDestination")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("qrmanagement.backend.Models.Branch", "origin")
                        .WithMany("outbounds")
                        .HasForeignKey("branchOrigin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("destination");

                    b.Navigation("origin");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.User", b =>
                {
                    b.HasOne("qrmanagement.backend.Models.Branch", "branch")
                        .WithMany("users")
                        .HasForeignKey("userBranch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Asset", b =>
                {
                    b.Navigation("assetMoves");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Branch", b =>
                {
                    b.Navigation("assets");

                    b.Navigation("inbounds");

                    b.Navigation("outbounds");

                    b.Navigation("users");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Kecamatan", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Kota", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("kecamatans");
                });

            modelBuilder.Entity("qrmanagement.backend.Models.Ticket", b =>
                {
                    b.Navigation("assetMoves");
                });
#pragma warning restore 612, 618
        }
    }
}
